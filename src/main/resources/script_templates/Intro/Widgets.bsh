/*-
 * #%L
 * JSR-223-compliant BeanShell scripting language plugin.
 * %%
 * Copyright (C) 2011 - 2017 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

#@ boolean(label = "boolean") pBoolean
#@ byte(label = "byte") pByte
#@ char(label = "char") pChar
#@ double(label = "double") pDouble
#@ float(label = "float") pFloat
#@ int(label = "int") pInt
#@ long(label = "long") pLong
#@ short(label = "short") pShort
#@ Boolean(label = "Boolean") oBoolean
#@ Byte(label = "Byte") oByte
#@ Character(label = "Character") oCharacter
#@ Double(label = "Double") oDouble
#@ Float(label = "Float") oFloat
#@ Integer(label = "Integer") oInteger
#@ Long(label = "Long") oLong
#@ Short(label = "Short") oShort
#@ int(min = 0, max = 1000) boundedInteger
#@ double(min = 0.2, max = 1000.7, stepSize = 12.34) boundedDouble
#@ BigInteger bigInteger
#@ BigDecimal bigDecimal
#@ String string
#@ File file
#@ ColorRGB color
#@ OUTPUT String result

// A BeanShell script exercising various parameter types.
// It is the duty of the scripting framework to harvest
// the parameter values from the user, and then display
// the 'result' output parameter, based on its type.

sb = new StringBuilder();

sb.append("Widgets BeanShell results:\n");

sb.append("\n");
sb.append("\tboolean = " + pBoolean + "\n");
sb.append("\tbyte = " + pByte + "\n");
sb.append("\tchar = " + "'" + pChar + "' [" + (int) pChar + "]\n");
sb.append("\tdouble = " + pDouble + "\n");
sb.append("\tfloat = " + pFloat + "\n");
sb.append("\tint = " + pInt + "\n");
sb.append("\tlong = " + pLong + "\n");
sb.append("\tshort = " + pShort + "\n");

sb.append("\n");
sb.append("\tBoolean = " + oBoolean + "\n");
sb.append("\tByte = " + oByte + "\n");
oCharValue = oCharacter == null ? "null" : "" + (int) oCharacter;
sb.append("\tCharacter = " + "'" + oCharacter + "' [" + oCharValue + "]\n");
sb.append("\tDouble = " + oDouble + "\n");
sb.append("\tFloat = " + oFloat + "\n");
sb.append("\tInteger = " + oInteger + "\n");
sb.append("\tLong = " + oLong + "\n");
sb.append("\tShort = " + oShort + "\n");

sb.append("\n");
sb.append("\tbounded integer = " + boundedInteger + "\n");
sb.append("\tbounded double = " + boundedDouble + "\n");

sb.append("\n");
sb.append("\tBigInteger = " + bigInteger + "\n");
sb.append("\tBigDecimal = " + bigDecimal + "\n");
sb.append("\tString = " + string + "\n");
sb.append("\tFile = " + file + "\n");
sb.append("\tcolor = " + color + "\n");

result = sb.toString();
